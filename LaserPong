/*
graphics library reference:
https://learn.adafruit.com/adafruit-gfx-graphics-library/graphics-primitives

TO DO: 
Boltinn getur bara farid i nokkrar attir, tharf ad flaekja thad.


*/

#include <Adafruit_GFX.h>    
#include <Adafruit_ST7735.h> 
#include <SPI.h>

// skja pinnar
#define TFT_CS     10
#define TFT_RST    9  
#define TFT_DC     8
#define TFT_SCLK 13   
#define TFT_MOSI 11   // SDA a skja
#define BLACK ST7735_BLACK

// define staerdir fyrir leik
#define padWidth 30           // breidd spada, i pixlum 
#define bRadius 3             // bolta radius
#define bColor ST7735_YELLOW  // litur a bolta
#define readFreq  20          // ms milli aflestra af fjarlaegdamaeli
#define writeFreq 20          // ms milli update a skja
#define analogUpper 720       // efri og nedri mork gildra ADC maelinga
#define analogLower 500

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

// timar sem halda utan um aflestur, skja og boltahreyfingu
unsigned long p1Read, p2Read, dispWrite, ballMove, ballFreq;

// stadsetningar player 1 og player 2 og bolta, og hradi bolta
int p1Pos, p1oldPos, p2Pos, p2oldPos; 
int bXstefna, bYstefna;
                         // ## --- Stadsetningar bolta, stig
int bXpos, bXoldPos, bYpos, bYoldPos; 
byte p1Stig, p2Stig;
int stefnur[] = {-2, -1, 1, 2};
int maelingar1[] = {0, 0, 0};
int maelingar2[] = {0, 0, 0};
int p1Mael = 0;
int p2Mael = 0;

// pinna skilgreiningar:
int ledPin1 = 1;
int ledPin2 = 2;

void setup() {
   Serial.begin(9600);
   tft.initR(INITR_BLACKTAB);
   tft.fillScreen(ST7735_BLACK);
   tft.setTextSize(3);
            
   pinMode(ledPin1, OUTPUT);
   pinMode(ledPin2, OUTPUT);

   p1oldPos = 0;
   p2oldPos = 0;
   p1Pos = 44;
   p2Pos = 44;
   p1Stig = 0;
   p2Stig = 0;

   p1Read = 2000;
   p2Read = 2000;
   dispWrite = 0;
   endursetja(80);   // byrjda med bolta a y=80
   updateBall();
   updateDisplay();
}


// tft.drawRect(x0,y0,w,h,color) -- 128x160
void updateDisplay(){
  
  if(p1Pos != p1oldPos){
   //  p1Pos = (p1oldPos + p1Pos)/2;
     tft.fillRect(p1oldPos, 5, padWidth, 2, BLACK);
     tft.fillRect(p1Pos, 5, padWidth, 2, ST7735_RED);
     p1oldPos = p1Pos;
  }

  if(p2Pos != p2oldPos){
   //  p2Pos = (p2oldPos + p2Pos)/2;
     tft.fillRect(p2oldPos, 153, padWidth, 2, BLACK);
     tft.fillRect(p2Pos, 153, padWidth, 2, ST7735_RED);
     p2oldPos = p2Pos;
  }
}

// fillCircle(x0,y0, r, color); 
void updateBall(){
  tft.fillCircle(bXoldPos, bYoldPos, bRadius, BLACK);
  tft.fillCircle(bXpos, bYpos, bRadius, bColor);
  bXoldPos = bXpos;
  bYoldPos = bYpos;
  ballMove = millis();
}

// random(min, max)  min inclusive, max exclusive
void endursetja(int yPos){
  bXpos = 64;
  bYpos = yPos;
  ballFreq = random(20,40);   // millisec milli updateBall();
  bXstefna = stefnur[random(0, 4)];
  
  if(yPos > 100){
  bYstefna = stefnur[random(0, 2)]; // 0-1
  }
  else if (yPos < 60){
    bYstefna = stefnur[random(2,4)] ; // 2-3
  }
  else{
    bYstefna = stefnur[random(0,4)]; // 0-3
  }
}

void scoreTable(){
  tft.setRotation(3);
  tft.setCursor(20, 10);  // y, x, snuid vid
  tft.setTextColor(ST7735_RED);
  tft.print(String(p2Stig));
  tft.setCursor(120, 10);
  tft.print(String(p1Stig));
  delay(1000);
  tft.setCursor(20, 10);  // x, y
  tft.setTextColor(BLACK);
  tft.print(String(p2Stig));
  tft.setCursor(120, 10);
  tft.print(String(p1Stig));
  tft.setRotation(0);
  }

int player1Dist(){
   int summa = 0;
   int maeling = 0;
   for (int i=2;i>0;i--){
       maelingar1[i] = maelingar1[i-1];
       summa += maelingar1[i];
    }
    maeling = analogRead(A3);
    if(maeling > analogLower && maeling < analogUpper){
      maelingar1[0] = maeling;   
    }
    else{
      maelingar1[0] = 610;
    }
    summa += maelingar1[0];
    return (summa / 3);
  }

int player2Dist(){
   int summa = 0;
   int maeling = 0;
   for (int i=2;i>0;i--){
       maelingar2[i] = maelingar2[i-1];
       summa += maelingar2[i];
    }
    maeling = analogRead(A4);
    Serial.println(maeling);
    if(maeling > analogLower && maeling < analogUpper){
      maelingar2[0] = maeling;
    }
    else{
      maelingar2[0] = 610;
    }
   summa += maelingar2[0];
   // Serial.println(summa / 3);
    return (summa / 3);
  }

void loop(){
                         // ## --- uppfaera player 1
if ((millis() - p1Read) > readFreq){ 
  p1Mael = player1Dist();
  if((p1Mael > analogLower) && (p1Mael < analogUpper)){
    digitalWrite(ledPin1, 1);
    p1Pos = map(p1Mael, analogLower, analogUpper, 110, 0); 
  }
  else if((p1Mael < analogLower) || (p1Mael > analogUpper)){
    digitalWrite(ledPin1, 0);
  }
  p1Read = millis();
}
                         // ## --- uppfaera player 2
if ((millis() - p2Read) > readFreq){
  p2Mael = player2Dist();
  if((p2Mael > analogLower) && (p2Mael < analogUpper)){
    digitalWrite(ledPin2, 1);
    p2Pos = map(p2Mael, analogLower, analogUpper, 0, 110);   // speglad.
  }
  else if((p2Mael < analogLower) || (p2Mael > analogUpper)){
    digitalWrite(ledPin2, 0);
  }
  p2Read = millis();
}
                         // ## --- uppfaera skja
if ((millis()) - dispWrite > writeFreq){
  dispWrite = millis();
  updateDisplay();
  }

                        // ## --- BOLTI, arekstrar og bounce --- ## //
if ((millis()) - ballMove > ballFreq) {
  int timeShift = 0;

                        //  --- ###  Bounce af hlidum
  if((bXpos > 127) || (bXpos < 1)) {   
    bXstefna = -bXstefna;
  }  // p1: y=5, p2: y=150 -- p1Pos, p2Pos,
  
                        // --- ### BOUNCE AF SPODUM 
  if(bYpos >= 152 && bYpos <= 154) {      // rekast a player 2? y = 153:155 
    if(!((bXpos < p2Pos) || (bXpos > (p2Pos + padWidth)))){
      bYstefna = -bYstefna;
    }
  }
  if(bYpos >= 5 && bYpos <= 7) {          // rekst a player 1? y = 5:7
    if(!((bXpos < p1Pos) || (bXpos > (p1Pos + padWidth)))){
      bYstefna = -bYstefna;
    }
  }

                      // --- ### SKORA I MARK??
  if(bYpos >= 158){                  // player1 eitt stig
    p1Stig += 1;
    scoreTable();
    endursetja(145);
  }
  if(bYpos <= 2){                    // player2 eitt stig
    p2Stig += 1;
    scoreTable();
    endursetja(15);
  }
  
  bXpos += bXstefna;  // uppfaera stadsetningu
  bYpos += bYstefna;  // uppfaera stadsetningu
  updateBall();
  }
}
